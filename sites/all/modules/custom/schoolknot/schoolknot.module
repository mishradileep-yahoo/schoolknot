<?php

/*
 * HOOK_feeds_after_parse implementation
*/ 
function schoolknot_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  global $user;
  $user_groups = og_get_groups_by_user();
  $user_school = reset($user_groups['node']);
    
  if($source->importer()->id == 'students_bulk_upload_feeds_xls') {
    //pr($result->items); die;
    
    // Validate First
    foreach($result->items as $key => $row) {
    	if(!($result->items[$key]['Student Registration ID'] != '')) {
    		drupal_set_message('Student Registration ID at row ' . ($key + 2) . ' is blank. Student can\'t be imported.', 'error');
    		unset($result->items[$key]);
    	}
    	elseif(!($result->items[$key]['Class'] != '')) {
    		drupal_set_message('Class at row ' . ($key + 2) . ' is blank. Student can\'t be imported.', 'error');
    		unset($result->items[$key]);
    	}
    	elseif(!($result->items[$key]['Student First Name'] != '')) {
    		drupal_set_message('Student First Name at row ' . ($key + 2) . ' is blank. Student can\'t be imported.', 'error');
    		unset($result->items[$key]);
    	}
    }
   
    foreach($result->items as $key => $row) {
      $username = $user_school . '_' . $result->items[$key]['Student Registration ID'];
      $username = strtolower($username);
      $username = preg_replace('@[^a-z0-9_]+@','_',$username);
      
      $result->items[$key]['User Name'] = $username;
      $result->items[$key]['Email'] = $username . '@test.schoolknot.com';
    }
    //pr($result); die('Die Any way in First stap');
  }
  if($source->importer()->id == 'teachers_bulk_upload_feeds_xls') {
    
  	// Validate First
    foreach($result->items as $key => $row) {
    	if(!($result->items[$key]['Teacher Employee ID'] != '')) {
    		drupal_set_message('Teacher Employee ID at row ' . ($key + 2) . ' is blank. Teacher can\'t be imported.', 'error');
    		unset($result->items[$key]);
    	}
    	elseif(!($result->items[$key]['Teacher First Name'] != '')) {
    		drupal_set_message('Teacher First Name at row ' . ($key + 2) . ' is blank. Teacher can\'t be imported.', 'error');
    		unset($result->items[$key]);
    	}
    }
  	
  	
    foreach($result->items as $key => $row) {
      $username = $user_school . '_' . $result->items[$key]['Teacher Employee ID'];
      $username = strtolower($username);
      $username = preg_replace('@[^a-z0-9_]+@','_',$username);
      
      $result->items[$key]['User Name'] = $username;
      $result->items[$key]['Email'] = $username . '@test.schoolknot.com';
    }
    //pr($result); die('Die Any way in First stap');
  }
  
  if($source->importer()->id == 'student_progress_data_feeds_xls_importer') {
    foreach($result->items as $key => $row) {
      $result->items[$key]['GUID'] = $row['Student SR No'] . '_' . $row['Class'] . '_' . $row['Subject'] . '_' . $row['Exam'];
      $result->items[$key]['Student SR No'] = strtolower(str_replace('-', '_', $row['Student SR No']));
    }
  }
}


function schoolknot_feeds_presave(FeedsSource $source, $entity, $item) {
	global $user;
	if($source->importer()->id == 'homework_importer_feeds') {
		// Load the library.
		if(function_exists('libraries_get_path')){
		$path = libraries_get_path('PHPExcel');
		$path = "$path/PHPExcel/IOFactory.php";
		}else{
		$path = drupal_get_path('module', 'feeds_xls') . '/PHPExcel/PHPExcel/IOFactory.php';
		}
		require_once $path;
		date_default_timezone_set(drupal_get_user_timezone());
		// Create new PHPExcel object
		$objPHPExcel = new PHPExcel();

		$date = PHPExcel_Shared_Date::ExcelToPHPObject($item['Date']);
		//format the date as you want.
		$formatedDate = $date->format('Y-m-d H:i:s');

		$user_groups = og_get_groups_by_user();
		$user_school = reset($user_groups['node']);


		$class_query = db_select('node', 'n');
		$class_query
		->condition('n.uid', $user->uid, '=')
		->condition('n.title', $item['Class'], '=')
		->fields('n', array('nid', 'title'));
		$result = $class_query->execute()->fetchAssoc();

		$entity->field_class[$entity->language][0]['target_id'] = $result['nid'];
		$entity->field_school_id[$entity->language][0]['target_id'] = $user_school;
		$entity->field_homework_date[$entity->language][0] = array('value' => $formatedDate);
		$entity->uid = $user->uid;
		//pr($entity); die('asdasd');
		
	}
  
	if($source->importer()->id == 'students_bulk_upload_feeds_xls') {
		// Load the library.
		if(function_exists('libraries_get_path')){
		$path = libraries_get_path('PHPExcel');
		$path = "$path/PHPExcel/IOFactory.php";
		}else{
		$path = drupal_get_path('module', 'feeds_xls') . '/PHPExcel/PHPExcel/IOFactory.php';
		}
		require_once $path;
		date_default_timezone_set(drupal_get_user_timezone());
		// Create new PHPExcel object
		$objPHPExcel = new PHPExcel();

		$date = PHPExcel_Shared_Date::ExcelToPHPObject($item['Student Date of Birth']);
		//format the date as you want.
		$formatedDate = $date->format('Y-m-d H:i:s');
		
		// Date of Birth
		$entity->field_student_date_of_birth['und'][0]['value'] = $formatedDate;
		
		//Password
		$formatedDateForPassword = $date->format('Ymd');
		$entity->pass = $formatedDateForPassword;
		
		// Class
		$class_query = db_select('node', 'n');
		$class_query
		->condition('n.uid', $user->uid, '=')
		->condition('n.title', $item['Class'], '=')
		->fields('n', array('nid', 'title'));
		$result = $class_query->execute()->fetchAssoc();
		$entity->field_class['und'][0]['target_id'] = $result['nid'];
		
		// Register in School
		$user_groups = og_get_groups_by_user();
		$user_school = reset($user_groups['node']);
		$entity->og_user_node['und'][0]['target_id'] = $user_school;
		$entity->timezone = 'UTC';
	}
if($source->importer()->id == 'teachers_bulk_upload_feeds_xls') {
		// Load the library.
		if(function_exists('libraries_get_path')){
		$path = libraries_get_path('PHPExcel');
		$path = "$path/PHPExcel/IOFactory.php";
		}else{
		$path = drupal_get_path('module', 'feeds_xls') . '/PHPExcel/PHPExcel/IOFactory.php';
		}
		require_once $path;
		date_default_timezone_set(drupal_get_user_timezone());
		// Create new PHPExcel object
		$objPHPExcel = new PHPExcel();

		$date = PHPExcel_Shared_Date::ExcelToPHPObject($item['Teacher Date of Joining']);
		//format the date as you want.
		$formatedDate = $date->format('Y-m-d H:i:s');
		
		// Date of Birth
		$entity->field_student_date_of_birth['und'][0]['value'] = $formatedDate;
		
		//Password
		$formatedDateForPassword = $date->format('Ymd');
		$entity->pass = $formatedDateForPassword;
		
		// Register in School
		$user_groups = og_get_groups_by_user();
		$user_school = reset($user_groups['node']);
		$entity->og_user_node['und'][0]['target_id'] = $user_school;
		$entity->timezone = 'UTC';
	}
	
	if($source->importer()->id == 'student_progress_data_feeds_xls_importer') {
	  
      $user_groups = og_get_groups_by_user();
      $user_school = reset($user_groups['node']);
    
      

      $student_username = $user_school . '_' . $item['Student SR No'];
      $student_user_object = user_load_by_name($student_username);
      $entity->field_student[$entity->language]['0']['target_id'] = $student_user_object->uid;
      
      
      
      // Class
      $class_query = db_select('node', 'n');
  		$class_query
  		->condition('n.uid', $user->uid, '=')
  		->condition('n.title', $item['Class'], '=')
  		->condition('n.type', 'classes', '=')
  		->fields('n', array('nid', 'title'));
  		$class_result = $class_query->execute()->fetchAssoc();
  		
		  $entity->field_class[$entity->language]['0']['target_id'] = $class_result['nid'];
		  
		  // Subject
      $subject_query = db_select('node', 'n');
  		$subject_query
  		->condition('n.uid', $user->uid, '=')
  		->condition('n.title', $item['Subject'], '=')
  		->condition('n.type', 'subject', '=')
  		->fields('n', array('nid', 'title'));
  		$subject_result = $subject_query->execute()->fetchAssoc();
		  $entity->field_subject[$entity->language]['0']['target_id'] = $subject_result['nid'];
		  
		  
		  // Subject
      $exam_query = db_select('node', 'n');
  		$exam_query
  		->condition('n.uid', $user->uid, '=')
  		->condition('n.title', $item['Exam'], '=')
  		->condition('n.type', 'examination', '=')
  		->fields('n', array('nid', 'title'));
  		$exam_result = $exam_query->execute()->fetchAssoc();
  		$entity->field_exam[$entity->language]['0']['target_id'] = $exam_result['nid'];
  		
  		$entity->title = 'Progress data for ' . $student_user_object->field_student_first_name[$entity->language]['0']['value']
  		 . ' ' . $student_user_object->field_student_last_name[$entity->language]['0']['value']
  		 . ' ' . $exam_result['title']
  		 . ' - ' . $subject_result['title'];
	}
}


function schoolknot_user_insert(&$edit, $account, $category) {
  if(isset($edit['feeds_item']->id) && $edit['feeds_item']->id = 'students_bulk_upload_feeds_xls') {
    $user_groups = og_get_groups_by_user();
		$user_school = reset($user_groups['node']);
    og_role_grant('node', $user_school, $account->uid, 2);
  }
	if(isset($edit['feeds_item']->id) && $edit['feeds_item']->id = 'teachers_bulk_upload_feeds_xls') {
    $user_groups = og_get_groups_by_user();
		$user_school = reset($user_groups['node']);
    og_role_grant('node', $user_school, $account->uid, 2);
  }
}

function schoolknot_feeds_before_import(FeedsSource $source) {
  //pr($source); die('Die in new node');
}



function hide_create_school_check() {
	global $user;
	
	if($user->uid == 0 || !in_array('School Administrator', $user->roles)) {
		return false; 
	}
	$class_query = db_select('node', 'n');
	$class_query
	->condition('n.uid', $user->uid, '=')
	->condition('n.type', 'school', '=')
	->fields('n', array('nid', 'title'));
	$result = $class_query->execute()->rowCount();
	
	if($result > 0) {
		return false;
	}
	else {
		return true;
	}
}

function hide_user_navigation() {
	global $user;

	if(hide_create_school_check()) 
		return false;
		
	$class_query = db_select('node', 'n');
	$class_query
	->condition('n.uid', $user->uid, '=')
	->condition('n.type', 'school', '=')
	->fields('n', array('nid', 'title'));
	$result = $class_query->execute()->rowCount();
	
	if($result > 0) {
		return true;
	}
	else {
		return false;
	}
}




/*
 * implement HOOK_node_submit
 */
function schoolknot_node_submit($node, $form, &$form_state) {
  global $user;
  $user_groups = og_get_groups_by_user();
  $user_school = reset($user_groups['node']);
  
  if($node->type == 'homework' || $node->type == 'holiday') {
    $node->field_school_id[$node->language][0]['target_id'] = $user_school;
  }
  if($node->type == 'poll') {
  	$duration =($node->runtime)/60/60/24;
  	$subject = 'Poll Notification';
  	$content = 'Dear Parent, Your School has lunched poll for '.$duration.' days request you to partispate';
  	$school_id = _get_school_node_id_for_school_admin();
    $parents_for_school = _get_all_parents_for_school($school_id['nid']);
    $parent_ids = array();
    foreach($parents_for_school as $parent_id => $parent) {
      array_push($parent_ids, $parent_id);
    }
    $recipients = user_load_multiple($parent_ids);
    $recipient_type = 3;
  	 _send_private_message($recipients, $subject, $content, $recipient_type);
  }
  /*
  // Redirect to Listing page for School Admin 
  $form_id = $form_state['input']['form_id'];
  switch($form_id) {
  	case 'subject_node_form' :
  		$form_state['redirect'] = 'saclp/subjects';
		$form_state['rebuild'] = TRUE;
		break;
  	
  }
  */
}

function _get_school_node_id_for_school_admin() {
  global $user;
  $user_school_id = og_get_groups_by_user($user, 'node');
  $result = db_select('node')
    ->fields('node', array('nid', 'title'))
    ->condition('nid', $user_school_id, 'IN')
    ->condition('type', 'school', '=')
    ->range(0, 10)
    ->execute()->fetchAssoc();
  return $result;
}

function _get_school_node_id_for_school_admin_user($author_id = 0) {
  if($author_id == 0) {
    global $user;
  }
  else {
    $user = user_load($author_id);
  }
  if(!is_object($user)) return;  
  $user_school_id = og_get_groups_by_user($user, 'node');
  if($user_school_id == '') return;
  $result = db_select('node')
    ->fields('node', array('nid', 'title'))
    ->condition('nid', $user_school_id, 'IN')
    ->condition('type', 'school', '=')
    ->range(0, 10)
    ->execute()->fetchAssoc();
  return $result;
}

function _get_all_group_member_ids($group_id) {
  global $user;
  $query = db_select('users', 'u');
    $query->join('og_membership', 'ogm', 'u.uid = ogm.etid');
    $query
      ->fields('u', array('uid', 'name'))
      ->condition('ogm.gid', $group_id, '=')
      ->condition('u.status', '1', '=');
      $result = $query->execute();
    foreach ($result as $student) {
      pr($student);
    }
}

function _get_all_parents_for_school($school_id) {
  global $user;
  $query = db_select('users', 'u');
    $query->join('og_membership', 'ogm', 'u.uid = ogm.etid');
    $query->join('users_roles', 'ur', 'u.uid = ur.uid');
    $query
      ->fields('u', array('uid', 'name'))
      ->condition('ogm.gid', $school_id, '=')
      ->condition('ur.rid', '5', '=')
      ->condition('u.status', '1', '=');
      $result = $query->execute();
      
     $return  = array();
    foreach ($result as $student) {
     $return[$student->uid] = $student;
    }
  return $return;
}

function _get_all_active_parents_for_school($school_id) {
  global $user;
  $query = db_select('users', 'u');
    $query->join('og_membership', 'ogm', 'u.uid = ogm.etid');
    $query->join('users_roles', 'ur', 'u.uid = ur.uid');
    $query
      ->fields('u', array('uid', 'name'))
      ->condition('ogm.gid', $school_id, '=')
      ->condition('ur.rid', '5', '=')
      ->condition('u.status', '1', '=')
      ->condition('u.access', '0', '!=');
      $result = $query->execute();
      
     $return  = array();
    foreach ($result as $student) {
     $return[$student->uid] = $student;
    }
  return $return;
}

function _get_all_parents_for_class($class_id) {
  global $user;
  $query = db_select('users', 'u');
    $query->join('users_roles', 'ur', 'u.uid = ur.uid');
    $query->join('field_data_field_class', 'class', 'u.uid = class.entity_id');
    $query
      ->fields('u', array('uid', 'name'))
      ->condition('ur.rid', '5', '=')
      ->condition('class.field_class_target_id', $class_id, '=')
      ->condition('class.bundle', 'user', '=')
      ->condition('u.status', '1', '=');
      $result = $query->execute();
      
     $return  = array();
    foreach ($result as $student) {
     $return[$student->uid] = $student;
    }
  return $return;
}

function _logged_in_as_block() {
  global $user;

  $result = array('as' => 'anonymous user');
  if($user->uid == 0) return $result;
  
  $user = user_load($user->uid);
  if(in_array('School Administrator', $user->roles)) {
    $result['as'] = 'School Administrator';
  }
  if(in_array('Parent', $user->roles)) {
    $result['as'] = 'Parent';
  }
  
  // School
  $school = _get_school_node_id_for_school_admin_user($user->uid);
  $result['school'] = $school;
  $result['user'] = $user;
  return $result;
}


function _user_full_name_by_user_obj($user) {
  $name = '';
  $user = user_load($user->uid);

  $fname = (isset($user->field_student_first_name['und'])) ? $user->field_student_first_name['und'][0]['value'] : ' ';
  $mname = (isset($user->field_student_middle_name['und'])) ? $user->field_student_middle_name['und'][0]['value'] : ' ';
  $lname = (isset($user->field_student_last_name['und'])) ? $user->field_student_last_name['und'][0]['value'] : ' ';
  
  $name = $fname . ' ' . $mname . ' ' . $lname;
  return $name;
  
}


/* Sent Notification on Event Creation */
function schoolknot_node_presave($node) {
  if($node->type == 'school_events') {
    $school_id = _get_school_node_id_for_school_admin();
    $node->og_group_ref[$node->language][0]['target_id'] = $school_id['nid'];
    
    $parents_list = _get_all_parents_for_school($school_id['nid']);
    $parent_ids = array();
    foreach($parents_list as $parent) {
      $parent_ids[] = $parent->uid;
    }
    $suject = 'School Created "' . $node->title . '" Event';
    $message = 'Dear Parent,' . "\n";
    $message .= 'An event was created by school of your child.' . "\n";
    $message .= $node->title . "\n";
    $message .= $node->body[$node->language][0]['value'] . "\n\n";
    
    $message .= 'Please click below link for more detail' . "\n";
    $message .= l(url('node/' . $node->nid), 'node/' . $node->nid) . "\n";
    
    $users = user_load_multiple($parent_ids);
    privatemsg_new_thread($users, $suject, $message);
   // pr($node);
   // die('DIE ANY WAY');
  }
}

/*
 * implement HOOK_node_form_alter
 */
function schoolknot_form_alter (&$form, &$form_state, $form_id) {
	switch($form_id) {
		
	  	case 'subject_node_form' :
	  	case 'classes_node_form' :
	  	case 'examination_node_form' :
	  	case 'homework_node_form' :
	  	case 'students_bulk_upload_importer_node_form' :
	  	case 'students_progress_bulk_upload_im_node_form' :
	  		$form['actions']['submit']['#submit'][] = 'school_admin_add_content_redirect_' . $form_id;
			break;
			case 'poll_node_form' :
				if(!isset($form['nid']['#value'])){
					$form['choice_wrapper']['choice']['new:0']['chtext']['#default_value'] = 'Agree';
					$form['choice_wrapper']['choice']['new:1']['chtext']['#default_value'] = 'DisAgree';
				}
			break;
			case 'user_register_form':
				$form['#validate'][] = 'schoolknot_user_register_form_validate';
			break;
			case 'node_delete_confirm':
				$form['description'] = array('#value' => "Are you sure you want to delete?");
			break;
			case 'teacher_bulk_upload_importer_node_form':
				$form['actions']['submit']['#value'] = "upload and save data";
			break;
			
	  }
	  if(($form_id == 'students_bulk_upload_importer_node_form')||($form_id =='students_progress_bulk_upload_im_node_form')){
	  	$form['actions']['submit']['#value'] = "upload and save data";
	  }
	
}

function schoolknot_user_register_form_validate($form, &$form_state) {
if (!preg_match('/^.*(?=.{6,}).*$/', $form_state['values']['pass'])) {
    form_set_error('pass', t('Your Password must be at least 6 characters.'));
  }
}

function school_admin_add_content_redirect_subject_node_form($form, &$form_state) {
	$form_state['redirect'] = 'saclp/subjects';
}
function school_admin_add_content_redirect_classes_node_form($form, &$form_state) {
	$form_state['redirect'] = 'saclp/classes';
}
function school_admin_add_content_redirect_examination_node_form($form, &$form_state) {
	$form_state['redirect'] = 'saclp/exams';
}
function school_admin_add_content_redirect_homework_node_form($form, &$form_state) {
	$form_state['redirect'] = 'saclp/homeworks';
}
function school_admin_add_content_redirect_students_bulk_upload_importer_node_form($form, &$form_state) {
	$form_state['redirect'] = 'bulk-upload-parser/students';
}
function school_admin_add_content_redirect_students_progress_bulk_upload_im_node_form($form, &$form_state) {
	$form_state['redirect'] = 'bulk-upload-parser/progress-sheet';
}



/*
 * Calculate average rating for school and return in number
 */
function _get_school_rating($school_id) {
  global $user;
  $query = db_select('node', 'n');
    $query->join('field_data_field_school_id', 'sid', 'n.nid = sid.entity_id');
    $query->join('field_data_field_average_of_rating', 'avg_rating', 'n.nid = avg_rating.entity_id');
    $query
      ->fields('avg_rating', array('field_average_of_rating_value'))
      ->condition('n.type', 'rate_answers', '=')
      ->condition('sid.field_school_id_target_id', $school_id, '=');
      $result = $query->execute();
      
     $ratings  = array();
     
    foreach ($result as $avg_rating) {
    	$ratings[] = average_specific_formating($avg_rating->field_average_of_rating_value);
    }
    if(count($ratings) == 0) {
    	$average = 0;
    }
	else {
		$average = array_sum($ratings) / count($ratings);
	}
	return $average;
}

function average_specific_formating($float) {
	$point_part = number_format($float - floor($float), 2);
	if($point_part < 0.25) {
		$return = floor($float);
	}
	else if($point_part > 0.25 && $point_part < 0.75) {
		$return = floor($float) + 0.5;
	}
	else {
		$return = ceil($float);
	}
	return $return;
}


function schoolknot_user_login(&$edit, $account) {
	global $user;
	
	if(hide_create_school_check()) {
		drupal_set_message(t('You havee not created school. Please create school to access other features of schoolknott.com.'), 'warning');
		$_GET['destination'] = 'node/add/school';
	}
	
	if($user->uid != 0 || in_array('Parent', $user->roles)) {
		//$_GET['destination'] = 'student-tracker/progress-sheet';
	}

}


/**
 * Implements hook_permission().
 */
function schoolknot_permission() {
  return array(
    'access school research' => array(
      'title' => t('Access School Research'),
    ),
  );
}
function schoolknot_menu() {
	$items['school-research'] = array(
		'title' => 'Schools Research',
		'page callback' => 'school_research',
		'access arguments' => array('access school research'),
	);
	
	return $items;
}

function school_research() {
	
	$most_rated = _get_most_rated_school();
	$most_active = _get_most_active_school();
	$most_member = _get_most_memeber_school();
	$parent_ratio = _get_teacher_parent_ratio_school();
	$data = array('most_rated' => $most_rated, 'most_active' => $most_active, 'most_member' => $most_member, 'teacher_parent' => $parent_ratio);
	
	return theme('schoolknot_school_research', array('data' => $data));
}


function _get_most_rated_school() {
	
	$query = db_select('node', 'n');
	
	$query->join('field_data_field_average_of_rating', 'rating', 'rating.entity_id = n.nid');
	$query->join('field_data_field_school_id', 'school', 'school.entity_id = n.nid');
	$query->join('node', 'school_details', 'school_details.nid = school.field_school_id_target_id');
	
	$query
		->fields('n', array('nid'))
		->fields('school', array('field_school_id_target_id'))
		->fields('school_details', array('title'))
		->condition('n.type', 'rate_answers', '=')
		->isNotNull('school.field_school_id_target_id')
		->groupBy('school.field_school_id_target_id')
		->orderBy('rating', 'DESC')
		->range(0,5)
		->addExpression('avg(rating.field_average_of_rating_value)', 'rating');
	
	$result = $query->execute()->fetchAll();
	return $result;
}

function _get_most_active_school() {
	
	$query = db_select('node', 'n');
	
	$query->join('users', 'u', 'n.uid = u.uid');
	$query->join('node', 'schools', 'schools.uid = u.uid');
	
	$query
		->fields('n', array('nid'))
		->fields('schools', array('title', 'nid'))
		->condition('n.type', 'classbell_status_update', '=')
		->condition('schools.type', 'school', '=')
		->groupBy('n.uid')
		->orderBy('total_post', 'DESC')
		->range(0,5)
		->addExpression('COUNT(*)', 'total_post');
	$result = $query->execute()->fetchAll();
	return $result;
}


function _get_most_memeber_school() {
	
	$query = db_select('og_membership', 'ogmem');
	
	$query->join('node', 'school', 'school.nid = ogmem.gid');
	
	$query
		->fields('ogmem', array('gid'))
		->fields('school', array('title', 'nid'))
		->condition('ogmem.type', 'og_membership_type_default', '=')
		->groupBy('ogmem.gid')
		->orderBy('total_memebers', 'DESC')
		->range(0,5)
		->addExpression('COUNT(*)', 'total_memebers');
	
	$result = $query->execute()->fetchAll();
	return $result;
}

function _get_teacher_parent_ratio_school() {
	
	$query = db_select('field_data_field_student_teacher_ratio', 'stration');
	
	$query->join('node', 'school', 'school.nid = stration.entity_id');
	
	$query
		->fields('stration', array('field_student_teacher_ratio_value'))
		->fields('school', array('title', 'nid'))
		->orderBy('stration.field_student_teacher_ratio_value', 'DESC')
		->range(0,5);
	
	$result = $query->execute()->fetchAll();
	return $result;
}

function schoolknot_theme() {
  $module_path = drupal_get_path('module', 'schoolknot');
  $base = array(
    'path' => $module_path . '/theme',
  );
  return array(
    'schoolknot_school_research' => $base + array(
      'template' => 'schoolknot_school_research',  //leave off .tpl.php
      'variables' => array('data' => NULL,),
    ),   
  );
}