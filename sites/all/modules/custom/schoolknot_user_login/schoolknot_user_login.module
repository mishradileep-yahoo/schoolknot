<?php
/**
 * Implements hook_permission().
 */
function schoolknot_user_login_permission () {
  return array(
      'schoolknot user login' => array(
          'title' => t('schoolknot user login'),
          'description' => t('Allow anonymous user for 2 stepped login.')
      ),
      'schoolknot user agreement' => array(
          'title' => t('schoolknot user Agreement'),
          'description' => t('Allow Parent users to sign up user agreement.')
      ),
      'schoolknot create user' => array(
          'title' => t('schoolknot create user'),
          'description' => t('Allow school admin to create edit student record.')
      )
      
  );
}

function schoolknot_user_login_menu() {
  $items = array();
  $items['schoolknot_user_login/step1'] = array(
  	'title' => 'User Login - Step 1',
    'description' => 'User Login - Step 1',
  	'page callback' => 'drupal_get_form',
	'page arguments' => array('schoolknot_user_login_step1'),
  	'access arguments' 	=> array('schoolknot user login'),
  	'type' => MENU_LOCAL_ACTION,
  );
  $items['schoolknot_user_login/step2/%'] = array(
  	'title' => 'User Login - Step 1',
    'description' => 'User Login - Step 1',
  	'page callback' => 'drupal_get_form',
	'page arguments' => array('schoolknot_user_login_step2', 2),
  	'access arguments' 	=> array('schoolknot user login'),
  	'type' => MENU_LOCAL_ACTION,
  );
  $items['schoolknot_user_login/school_autocomplete'] = array(
  	'title' => 'School name autocomplete',
    'description' => 'School name autocomplete',
  	'page callback' => 'school_name_autocomplete',
  	'access arguments' 	=> array('schoolknot user login'),
  	'type' => MENU_LOCAL_ACTION,
  );
  $items['schoolknot_user_login/user_agreement'] = array(
  	'title' => 'Student Parent User Agreement',
    'description' => 'Student Parent User Agreement',
  	'page callback' => 'drupal_get_form',
	'page arguments' => array('schoolknot_user_agreeement'),
  	'access arguments' 	=> array('schoolknot user agreement'),
  	'type' => MENU_LOCAL_ACTION,
  );
  $items['create_student'] = array(
  	'title' => 'Create an individual student',
    'description' => 'Create an individual student',
  	'page callback' => 'drupal_get_form',
	'page arguments' => array('schoolknot_create_user'),
  	'access arguments' 	=> array('schoolknot create user'),
  	'type' => MENU_LOCAL_ACTION,
  );
  $items['edit_student/%'] = array(
  	'title' => 'Create an individual student',
    'description' => 'Create an individual student',
  	'page callback' => 'drupal_get_form',
	'page arguments' => array('schoolknot_edit_user', 1),
  	'access arguments' 	=> array('schoolknot create user'),
  	'type' => MENU_LOCAL_ACTION,
  );
  
  
   $items['schoolknot/reset/%/%/%'] = array(
  	'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('schoolknot_user_auth_account', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['schoolknot/reset/password'] = array(
  	'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('schoolknot_user_reset_password'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  
  return $items;
}

function schoolknot_user_login_step1($form, &$form_state) {
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('School Name'), 
		'#description' => t('Type school name and select desired school from options below.'),
		'#autocomplete_path' => 'schoolknot_user_login/school_autocomplete',
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => TRUE,
		'#attributes' => array('placeholder' => array('Type school name')),
	);
	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
	);
		
	return $form;
}

function schoolknot_user_login_step1_submit($form, &$form_state) {
	drupal_goto('schoolknot_user_login/step2/' . base64_encode($form_state['values']['title']));
}

function schoolknot_user_login_step2($form, &$form_state, $school_name) {
	
	$form['school_name'] = array(
		'#type' => 'textfield',
		'#title' => t('School name'),
		'#disabled' =>TRUE, 
		'#size' => 60,
		'#maxlength' => 128,
		'#default_value' => base64_decode($school_name),
	);
	$form['username'] = array(
		'#type' => 'textfield',
		'#title' => t('Username'), 
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => TRUE,
		'#attributes' => array('placeholder' => array('Username')),
	  '#description' => 'Please enter the student registration ID',
	);
	$form['password'] = array(
		'#type' => 'password',
		'#title' => t('Password'), 
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => TRUE,
		'#attributes' => array('placeholder' => array('Password')),
		'#description' => 'Please enter the student date of birth in YYYYDDMM format for first time login.',
	);
	$form['school_title'] = array(
		'#type' => 'hidden',
		'#value' => $school_name,
		
	);
	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
	);
	
	return $form;	
}

function schoolknot_user_login_step2_submit($form, &$form_state) {
	// Get School from school name
	$query = db_select('node', 'n');
	$query->fields('n', array('nid'))
		->condition('n.title', base64_decode($form_state['values']['school_title']), '=')
		->condition('n.type', 'school', '=')
		->condition('n.status', '1', '=')
		->range(0, 1);
	$result = $query->execute()->fetchAll();
	
	$username = $result[0]->nid . '_' . $form_state['values']['username'];
	$password = $form_state['values']['password'];
	
	if ($uid = user_authenticate($username, $password)) {
		global $user;
		$user = user_load($uid);
		$login_array = array ('name' => $username);
		user_login_finalize($login_array);
		
		if(in_array('Parent', $user->roles)) {
		  drupal_goto('messages');
		}
		elseif(in_array('Teacher', $user->roles)) {
		  $school_id = $user->og_user_node['und'][0]['target_id'];
		  drupal_goto('node/' . $school_id);
		}
		
	}
	else {
		drupal_set_message('Sorry, unrecognized username or password.' . l('Have you forgotten your password?', 'user/password'), 'error');
	}
	
}

function school_name_autocomplete($string = '') {
	if ($string) {
		$query = db_select('node', 'n');
		$query->fields('n', array('title'))
			->condition('n.title', db_like($string) . '%', 'LIKE')
			->condition('n.type', 'school', '=')
			->condition('n.status', '1', '=')
			->range(0, 10);
		$result = $query->execute();	
		foreach ($result as $school) {
			$matches[$school->title] = check_plain($school->title);
		}
	}
	drupal_json_output($matches);
}


function schoolknot_user_login_preprocess_page(&$vars) {
    global $user;
    $agrs = arg();
    if(in_array('Parent', $user->roles)) {
    	$useObj = user_load($user->uid);
    	if(!isset($useObj->field_agreement_status['und']) || $useObj->field_agreement_status['und'][0]['value'] != 1) {
    		if(drupal_is_front_page() || ($agrs[0] != 'schoolknot_user_login' && $agrs[1] != 'user_agreement')) {
    			drupal_goto('schoolknot_user_login/user_agreement');
    		}
    	}
    }
    //$timestamp = REQUEST_TIME;
    //drupal_set_message(url("schoolknot/reset/$user->uid/$timestamp/" . user_pass_rehash($user->pass, $timestamp, $user->login), array('absolute' => TRUE)));
}

function schoolknot_user_agreeement($form, &$form_state) {
	drupal_set_title('Terms and Conditions');
	$url = 'terms-and-conditions';
	$path = drupal_lookup_path('source', $url);
	$node_id = explode('/', $path);
	$agreement_node = node_load($node_id[1]);
	
	$form['user_agreement'] = array(
		'#markup' => '<div id="user-agreement-signup">' . $agreement_node->body['und'][0]['value'] . '</div>',
	);
	$form['student_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'), 
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => TRUE,
		'#attributes' => array('placeholder' => array('Email')),
	  '#description' => 'Please enter your email address to complete registration process.<br>All communication from SchoolKnot will be delivered on this email address.',
	);
	$form['actions']['agreed'] = array(
		'#type' => 'submit',
		'#value' => t('I Agree'),
	);
	$form['actions']['disagree'] = array(
		'#type' => 'submit',
		'#value' => t('I Disgree'),
	);
		
	return $form;
}

function schoolknot_user_agreeement_validate($form, &$form_state) {
  if(!valid_email_address($form_state['values']['student_email'])) {
    form_set_error('student_email', t('Please provide a valid email address.'));
  }
}

function schoolknot_user_agreeement_submit($form, &$form_state) {
	global $user;
	$logedInUser = user_load($user->uid);
	if($form_state['values']['op'] == 'I Agree') {
		$logedInUser->field_agreement_status['und'][0]['value'] = 1;
		$logedInUser->field_student_email_id['und'][0]['value'] = $form_state['values']['student_email'];
		user_save($logedInUser);
		schoolknot_user_mail_send($user);
		drupal_set_message('Further instructions has been emailed to you.', 'status');
		user_logout();
	}
	else {
		drupal_set_message('You can not access schoolknot.com as a parent untill you don\'t agree on Terma and conditions.', 'error');
	}
}

function schoolknot_create_user($form, &$form_state) {
	
	$form['field_student_registration_id'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student Registration ID'), 
		'#size' => 60, 
		'#maxlength' => 128,
		'#required' => TRUE,
	);
	/*
	$form['field_student_email_id'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student Email ID'), 
		'#size' => 60, 
		'#maxlength' => 128,
		'#required' => TRUE,
	);
	*/
	$form['field_student_first_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student First Name'), 
		'#size' => 60, 
		'#maxlength' => 128, 
		'#required' => TRUE,
	);
	$form['field_student_first_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student First Name'), 
		'#size' => 60, 
		'#maxlength' => 128, 
		'#required' => TRUE,
	);
	$form['field_student_middle_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student Middle Name'), 
		'#size' => 60, 
		'#maxlength' => 128, 
	);
	$form['field_student_last_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student Last Name'), 
		'#size' => 60, 
		'#maxlength' => 128, 
	);
	
	$form['field_student_date_of_birth'] = array(
		'#type' => 'date', 
		'#title' => 'Student Date of Birth', 
		'#required' => TRUE,
	);
	
	// Get School Classes
	global $user;
	$result = db_select('node')
		->fields('node', array('nid', 'title'))
		->condition('uid', $user->uid, '=')
		->condition('type', 'classes', '=')
		->execute()->fetchAll();
	$class_options = array();
	foreach($result as $class) {
		$class_options[$class->nid] = $class->title;
	}
	
	$form['field_class'] = array(
		'#type' => 'select',
		'#title' => t('Class'),
		'#options' => $class_options,
	);

	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Create Student'),
	);
	
	return $form;
}

function schoolknot_create_user_validate($form, &$form_state) {
	global $user;
  	$user_groups = og_get_groups_by_user();
  	$user_school = reset($user_groups['node']);
	
	$username = $user_school . '_' . $form_state['values']['field_student_registration_id'];
	$username = strtolower($username);
	$username = preg_replace('@[^a-z0-9_]+@','_',$username);
	
	$validate_user = user_load_by_name($username);
	if($validate_user){
		form_set_error('field_student_registration_id', t('Student with same registration id alreday exist.'));
	}
	/*
	$validate_user = user_load_by_mail($form_state['values']['field_student_email_id']);
	if($validate_user){
		form_set_error('field_student_email_id', t('Email ID already exist.'));
	}
	*/
	
	$form_state['values']['username'] = $username;
	$form_state['values']['og_user_node'] = $user_school;
	
	$usersample = user_load(102);
//	pr($usersample); die;

}

function schoolknot_create_user_submit($form, &$form_state) {

	$user_fields = array(
		'name' => $form_state['values']['username'],
		//'mail' => $form_state['values']['field_student_email_id'],
		'pass' => $form_state['values']['field_student_date_of_birth']['year'] . $form_state['values']['field_student_date_of_birth']['month'] . $form_state['values']['field_student_date_of_birth']['day'],
		'status' => 1,
		'roles' => array(
			DRUPAL_AUTHENTICATED_RID => 'authenticated user',
			5 => 'Parent',
		),
	);
	$user_fields['field_student_registration_id']['und'][0]['value'] = $form_state['values']['field_student_registration_id'];
	
	$user_fields['field_student_first_name']['und'][0]['value'] = $form_state['values']['field_student_first_name'];
	$user_fields['field_student_middle_name']['und'][0]['value'] = $form_state['values']['field_student_middle_name'];
	$user_fields['field_student_last_name']['und'][0]['value'] = $form_state['values']['field_student_last_name'];
	
	$user_fields['field_student_date_of_birth']['und'][0]['value'] = $form_state['values']['field_student_date_of_birth']['year'] . '-' . $form_state['values']['field_student_date_of_birth']['month'] . '-' . $form_state['values']['field_student_date_of_birth']['day'] . ' 00:00:00';
	
	$user_fields['field_class']['und'][0]['target_id'] = $form_state['values']['field_class'];
	$user_fields['og_user_node']['und'][0]['target_id'] = $form_state['values']['og_user_node'];
	
	$account = user_save('', $user_fields);

	drupal_set_message('User created successfully.', 'status');
	drupal_goto('school-admin-students-list');
}


function schoolknot_edit_user($form, &$form_state, $uid) {
	
	$edit_user = user_load($uid);
	//pr($edit_user);
	
	$label_student_registration_id = t('Student Registration ID');
	$label_student_first_name = t('Student First Name');
	$label_student_middle_name = t('Student Middle Name');
	$label_student_last_name = t('Student Last Name');
	$label_student_date_of_birth = t('Student Date of Birth');
	if(in_array('Teacher', $edit_user->roles)) {
	  $label_student_registration_id = t('Teacher Registration ID');
  	$label_student_first_name = t('Teacher First Name');
  	$label_student_middle_name = t('Teacher Middle Name');
  	$label_student_last_name = t('Techer Last Name');
  	$label_student_date_of_birth = t('Date of Joining');
	}
	
	$form['field_uid'] = array(
		'#type' => 'hidden', 
		'#value' => $uid,
	);
	
	$form['field_student_registration_id'] = array(
		'#type' => 'textfield', 
		'#title' => $label_student_registration_id, 
		'#size' => 60, 
		'#maxlength' => 128,
		'#required' => TRUE,
		'#default_value' => $edit_user->field_student_registration_id['und'][0]['value'],
	);
	/*
	$form['field_student_email_id'] = array(
		'#type' => 'textfield', 
		'#title' => t('Student Email ID'), 
		'#size' => 60, 
		'#maxlength' => 128,
		'#required' => TRUE,
		'#default_value' => $edit_user->mail,
	);
	*/
	$form['field_student_first_name'] = array(
		'#type' => 'textfield', 
		'#title' => $label_student_first_name, 
		'#size' => 60, 
		'#maxlength' => 128, 
		'#required' => TRUE,
		'#default_value' => $edit_user->field_student_first_name['und'][0]['value'],
	);
	$form['field_student_middle_name'] = array(
		'#type' => 'textfield', 
		'#title' => $label_student_middle_name, 
		'#size' => 60, 
		'#maxlength' => 128,
		'#default_value' => $edit_user->field_student_middle_name['und'][0]['value'],
	);
	$form['field_student_last_name'] = array(
		'#type' => 'textfield', 
		'#title' => $label_student_last_name, 
		'#size' => 60, 
		'#maxlength' => 128,
		'#default_value' => $edit_user->field_student_last_name['und'][0]['value'],
	);
	
	$form['field_student_date_of_birth'] = array(
		'#type' => 'date', 
		'#title' => $label_student_date_of_birth, 
		'#required' => TRUE,
		'#default_value' => _get_datefield_value_from_dob($edit_user->field_student_date_of_birth['und'][0]['value']),
	);
	if(!in_array('Teacher', $edit_user->roles)) {
	// Get School Classes
	global $user;
	//pr($user);
	$result = db_select('node')
		->fields('node', array('nid', 'title'))
		->condition('uid', $user->uid, '=')
		->condition('type', 'classes', '=')
		->execute()->fetchAll();
	$class_options = array();
	foreach($result as $class) {
		$class_options[$class->nid] = $class->title;
	}
	
	$form['field_class'] = array(
		'#type' => 'select',
		'#title' => t('Class'),
		'#options' => $class_options,
		'#default_value' => $edit_user->field_class['und'][0]['target_id'],
	);
	}
	
	$form['status'] = array(
		'#type' => 'radios',
		'#title' => t('Status'),
		'#options' => array(0 => 'Block', 1 => 'Active'),
		'#default_value' => $edit_user->status,
	);

	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Update Student'),
	);
	return $form;
}

function schoolknot_edit_user_submit($form, &$form_state) {

	$edit_user = user_load($form_state['values']['field_uid']);

	/*
	$user_fields = array(
		'mail' => $form_state['values']['field_student_email_id'],
	);
	*/
	$user_fields['field_student_registration_id']['und'][0]['value'] = $form_state['values']['field_student_registration_id'];
	
	$user_fields['field_student_first_name']['und'][0]['value'] = $form_state['values']['field_student_first_name'];
	$user_fields['field_student_middle_name']['und'][0]['value'] = $form_state['values']['field_student_middle_name'];
	$user_fields['field_student_last_name']['und'][0]['value'] = $form_state['values']['field_student_last_name'];
	
	$user_fields['field_student_date_of_birth']['und'][0]['value'] = $form_state['values']['field_student_date_of_birth']['year'] . '-' . $form_state['values']['field_student_date_of_birth']['month'] . '-' . $form_state['values']['field_student_date_of_birth']['day'] . ' 00:00:00';
	
	if(isset($form_state['values']['field_class'])) {
	  $user_fields['field_class']['und'][0]['target_id'] = $form_state['values']['field_class'];
	}
	$user_fields['status'] = $form_state['values']['status'];
	
	$account = user_save($edit_user, $user_fields);

	drupal_set_message('User '.$form_state['values']['field_student_registration_id'].' edited successfully.', 'status');
	drupal_goto('school-admin-students-list');
	
}

function _get_datefield_value_from_dob($value) {
	$valueArr = explode(' ', $value);
	$date = explode('-', $valueArr[0]);
	return array('year' => $date[0], 'month' => $date[1], 'day' => $date[2]);
}

// Hide Register & Password tab from Login
function schoolknot_user_login_menu_alter(&$item) {
  // Hide the "Create new account" tab
  $item['user/register']['type'] = MENU_CALLBACK;
  $item['user']['type'] = MENU_CALLBACK;
  $item['user/password']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_token_info().
 */
function schoolknot_user_token_info() {
  $type = array(
    'name' => t('Cloud Personalization'),
    'description' => t('Tokens for Cloud Personalization Banner.'),
  );
}

/**
 * Implements hook_tokens().
 */
function schoolknot_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
  
}

function schoolknot_user_mail($key, &$message, $params) {
  
  global $user;
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    case 'user_authentication':
      
      $message['subject'] = t('Activate your @site-name account.', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      $message['body'][] = check_plain($params['body']);
      
      //$system = drupal_mail_system('schoolknot_user', 'user_authentication');
      //$message  = $system->format($message);
      //$message['result'] = $system->mail($message);
		
      break;
  }
}

function schoolknot_user_mail_send($user) {
  $userObj = user_load($user->uid);
  $module = 'schoolknot_user';
  $key = 'user_authentication';
  $to = $userObj->field_student_email_id['und'][0]['value'];
  $from = variable_get('site_mail', 'admin@example.com');
  
  $mail_body = '';
  $timestamp = REQUEST_TIME;
  $password_reste_url = url("schoolknot/reset/$userObj->uid/$timestamp/" . user_pass_rehash($userObj->pass, $timestamp, $userObj->login), array('absolute' => TRUE));
  $mail_body .= _user_full_name_by_user_obj($user) . ',
Thank you for registering at SchoolKnot.com. Please activate your account by clicking this link or copying and pasting it to your browser:

' . $password_reste_url . '

You will asked for password reset after activation. Please be ready with your password string.

--  SchoolKnot.com team';
  
  $params = array(
		'subject' => 'Account details for ' . _user_full_name_by_user_obj($userObj) . ' at SchoolKnot.com',
		'body' => $mail_body,
    'theme' => 'user_authentication'
	);
  
  $language = language_default();
  $send = TRUE;
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE) {
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }

}


function schoolknot_user_theme() {
  $themes = array (
    'user_authentication' => array(
			'variables' => array(),
    ),
  );
  foreach ($themes as $hook => $theme) {
    $themes[$hook]['path'] = drupal_get_path('module', 'schoolknot_user') . '/email_templates';
    $themes[$hook]['template'] = str_replace('_', '-', $hook);
  }
  return $themes;
}

function schoolknot_user_auth_account($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => _user_full_name_by_user_obj($user), '!user_edit' => url("user/$user->uid/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
      } else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
    // 86400 seconds.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
          // Let the user's password be changed without the current password check.
          $token = drupal_hash_base64(drupal_random_bytes(55));
          $_SESSION['pass_reset_' . $user->uid] = $token;
          drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
        }
        else {
          $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
          $form['actions'] = array('#type' => 'actions');
          $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("schoolknot/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}


function schoolknot_user_reset_password($form, &$form_state){
  $form['pass'] = array(
  	'#type' => 'password', 
  	'#title' => t('Password'), 
  	'#maxlength' => 64, 
  	'#size' => 15,
  );
  $form['pass'] = array(
    '#type' => 'password_confirm', 
    '#size' => 25,
  );
  $form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
	);
		
	return $form;
}
function schoolknot_user_reset_password_submit($form, &$form_state){
  global $user;
  $edit['pass'] = $form_state['values']['pass'];
  user_save($user, $edit);
  drupal_set_message('Password reseted successfully.');
  drupal_goto();
}